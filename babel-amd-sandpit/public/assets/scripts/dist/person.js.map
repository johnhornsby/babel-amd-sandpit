{"version":3,"sources":["public/assets/scripts/src/person.js"],"names":[],"mappings":";;;;;;;;AACA,KAAM,MAAM,GAAG,MAAM,EAAE,CAAC;;KAEH,MAAM;AAEf,WAFS,MAAM,CAEd,IAAI,EAAE;yBAFE,MAAM;;AAIzB,OAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;AAGjB,OAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;;;AAGjB,OAAI,KAAK,GAAG,CAAC,CAAC;;AAEd,SAAM,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE;AAClC,OAAG,EAAE;YAAM,KAAK;KAAA;AAChB,OAAG,EAAE,aAAC,KAAK;YAAK,KAAK,GAAG,KAAK;KAAA;IAC7B,CAAC,CAAC;GAEH;;eAjBmB,MAAM;;QAmBhB,YAAG;AACZ,WAAO,IAAI,CAAC,MAAM,CAAC,CAAC;IACpB;QAES,UAAC,KAAK,EAAE;AACjB,QAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;IACrB;;;SAzBmB,MAAM;;;kBAAN,MAAM","file":"public/assets/scripts/src/person.js","sourcesContent":["// Using a symbol here seems to ensure we have unique references per instance\nconst HEIGHT = Symbol();\n\nexport default class Person {\n\n\tconstructor(name) {\n\n\t\tthis.name = name;\n\t\t\n\t\t// Using a symbol allows us to also keep the variable private but use the getters and setters outside of the constructor\n\t\tthis[HEIGHT] = 0;\n\n\t\t// This allows us to use a private variable that is scoped internally.\n\t\tvar __age = 0;\n\n\t\tObject.defineProperty(this, \"age\", {\n\t\t\tget: () => __age,\n\t\t\tset: (value) => __age = value\n\t\t});\n\n\t}\n\n\tget height() {\n\t\treturn this[HEIGHT];\n\t}\n\n\tset height(value) {\n\t\tthis[HEIGHT] = value;\n\t}\n\n\n}"]}